---
title: "Advanced Regression: Distributed non-linear lag models and other extensions"
date: "02-28-2025"
author:
  name: "Garyfallos Konstantinoudis"
institute: "Imperial College London"
editor: visual
date-format: medium
title-slide-attributes:
  data-background-color: "#f3f4f4"
  data-background-image: "../../assets/logo_trans.png"
  data-background-size: 50%
  data-background-position: 90% 120%
format:
    revealjs:
      theme: [default, ../../assets/style.scss]
      logo: "../../assets/logo_trans.png"
      slide-number: true
      incremental: false
      chalkboard:
        buttons: false
---

## Overview

Concepts we cover in this lecture:

-   Distributed lag non-linear models

-   Cross-basis function

-   Case studies

## Introduction of the problem

-   An exposure event is frequently associated with a risk lasting for a defined period in the future

-   The risk at a given time is assumed a result of protracted exposures experienced in the past

-   Examples include, drugs, carcinogens, etc.

Challenge: The risk should be modelled in terms of contributions depending on intensity and timing of the exposure events: bi-dimensional association (interaction).

## Example 1: Lung cancer and radon exposure

![](Figures/radonlung.png)

## Example 2: PM10 in Chicago

```{r}
#| echo: true
#| eval: true
#| warning: false
#| message: false

library(dlnm)
library(ggplot2)
library(dplyr)

k <- 1:16
res_store <- list()

for (i in 1:length(k)) {
  chicagoNMMAPS$pm10_laggeg <- lag(chicagoNMMAPS$pm10, n = k[i] - 1)

  mgcv::gam(
    death ~ s(temp) +
      s(time) + s(month) + dow + pm10_laggeg,
    data = chicagoNMMAPS, family = "poisson"
  ) -> tmp

  res_store[[i]] <- list(
    est = coef(tmp)["pm10_laggeg"],
    LL = coef(tmp)["pm10_laggeg"] - 1.96 * summary(tmp)$se["pm10_laggeg"],
    UL = coef(tmp)["pm10_laggeg"] + 1.96 * summary(tmp)$se["pm10_laggeg"]
  )
}


lapply(res_store, unlist) %>%
  do.call(rbind, .) %>%
  as_tibble() %>%
  mutate(
    type =
      factor(paste0("lag ", 0:15),
        levels = paste0("lag ", 0:15)
      )
  ) -> plotres

ggplot(data = plotres) +
  geom_point(aes(x = type, y = est.pm10_laggeg)) +
  # geom_line(aes(x=type, y=est.pm10_laggeg, group=1), linetype = "dashed") +
  geom_errorbar(aes(x = type, ymin = LL.pm10_laggeg,
                    ymax = UL.pm10_laggeg, width = 0.1)) +
  geom_hline(yintercept = 0, col = "red", linetype = "dotted") +
  theme_bw() +
  ylab("log risk PM10") +
  xlab("Lags") -> p1


ggplot(data = plotres) +
  geom_point(aes(x = type, y = est.pm10_laggeg)) +
  geom_line(aes(x = type, y = est.pm10_laggeg, group = 1)) +
  geom_ribbon(aes(x = type, ymin = LL.pm10_laggeg,
                  ymax = UL.pm10_laggeg, group = 1),
              fill = "blue", alpha = 0.2) +
  geom_hline(yintercept = 0, col = "red", linetype = "dotted") +
  theme_bw() +
  ylab("log risk PM10") +
  xlab("Lags") -> p2
```

## Example 2: PM10 in Chicago

What are the main assumptions here?

```{r}
#| echo: false
#| eval: true
#| fig-align: "center"
#| warning: false
#| message: false

library(patchwork)
(p1 + theme(text = element_text(size = 15))) /
  (p2 + theme(text = element_text(size = 15)))
```

## Distributed linear lag models

The unconstrained distributed lag model of order $q$ is:

$$Y_t = \beta_0 + \beta_{10}X_t + \beta_{11}X_{t-1} + \dots+ \beta_{1q}X_{t-q} + \epsilon_t$$

-   $\beta_{1\ell}$ is the effect at lag $\ell=0, 1, \dots q$ and $\epsilon_t$ an error term.

-   The overall impact for a unit change in $X$ is given by $\sum^q_{\ell=0}\beta_\ell$.

## Example 2: PM10 in Chicago

::: {style="font-size: 80%;"}
```{r}
#| echo: true
#| eval: true

chicagoNMMAPS$pm10_laggeg0 <- lag(chicagoNMMAPS$pm10, n = 0)
chicagoNMMAPS$pm10_laggeg1 <- lag(chicagoNMMAPS$pm10, n = 1)
chicagoNMMAPS$pm10_laggeg2 <- lag(chicagoNMMAPS$pm10, n = 2)
chicagoNMMAPS$pm10_laggeg3 <- lag(chicagoNMMAPS$pm10, n = 3)

mgcv::gam(death ~ s(temp) +
  s(time) + s(month) + dow + pm10_laggeg0 + pm10_laggeg1 + pm10_laggeg2 +
  pm10_laggeg3, data = chicagoNMMAPS, family = "poisson") %>% summary()
```
:::

::: {style="font-size: 80%;"}
## Considerations

-   Easy implementation when lags are few; overparametrized when we want to assess a lot of lags

-   Collinearity issues: The exposure is likely to be highly correlated with the values of the previous/after days. Weird behaviours in the point estimates (surprising protective effects), variance inflation.

Alternative: to impose some constraints:

-   A constant effect within lag intervals

-   Average of the exposures in the previous $L$ day

-   Describing the coefficients with a smooth curve using continuous functions such as splines, polynomials, and other basis functions.

The idea: $\beta_{\ell}$ can be modelled using a basis function.
:::

::: {style="font-size: 80%;"}
## Polynomial DLM

Let $\beta_\ell = \sum_j^p\tau_j\ell^j, \;\;\; \ell = 0, \dots, q$ , lets write it for 2 lags using a 3rd degree polynomial to see it explicitly:

\begin{align}Y_t &= \beta_0 + \beta_{10}X_t + \beta_{11}X_{t-1} + \beta_{12}X_{t-2} + \epsilon_t\\\beta_{10} &= \tau_0, \; \beta_{11} = \tau_0 + \tau_1 + \tau_2 + \tau_3, \; \beta_{12} = \tau_0 + \tau_1 2 + \tau_2 2^2 + \tau_3 2^3\end{align}

and we can modify as per first lecture to model more localized structures using: $\beta_\ell = \sum_j^p\tau_j\ell^j + \sum_k^K\nu_k(\ell-\kappa_k)^p_+$, thus:

\begin{align*}\beta_{10} &= \tau_0 + \nu_1(0-\kappa_1)^3_+ + \dots + \nu_K(0-\kappa_K)^3_+, \\\beta_{11} &= \tau_0 + \tau_1 + \tau_2 + \tau_3 + \nu_1(1-\kappa_1)^3_+ + \dots + \nu_K(1-\kappa_K)^3_+, \\\beta_{12} &= \tau_0 + \tau_1 2  + \tau_2 2^2 + \tau_3 2^3 + \nu_1(2-\kappa_1)^3_+ + \dots + \nu_K(2-\kappa_K)^3_+\end{align*}

and similarly we can penalize it can estimate *the penalised spline distributed lag estimate* of $\beta_{\ell}$
:::

## Polynomial DLM in R: Chicago

```{r}
#| echo: true
#| eval: true
cb1.pm <- crossbasis(chicagoNMMAPS$pm10,
  lag = 15, argvar = list(fun = "lin"),
  arglag = list(fun = "poly", degree = 4)
)

summary(cb1.pm)
```

## Polynomial DLM in R: Chicago

```{r}
#| echo: true
#| eval: true
model_dlm <- mgcv::gam(death ~ s(temp) + s(time) + s(month) + dow + cb1.pm,
  family = poisson(), chicagoNMMAPS
)

pred1.pm <- crosspred(cb1.pm, model_dlm, at = 0:20, bylag = 0.2)
plot(pred1.pm,
  ptype = "slices", var = 1, cumul = FALSE, ylab = "RR",
  main = "Association with a 1-unit increase in PM10"
)
```

## Polynomial DLM in R: Chicago

```{r}
#| echo: true
#| eval: true
summary(model_dlm)
```

## Polynomial DLM in R: Chicago

Retrieve the cumulative effect. What is the interpretation here?

```{r}
#| echo: true
#| eval: true
pred1.pm$allRRfit["1"]
pred1.pm$allRRlow["1"]
pred1.pm$allRRhigh["1"]
```

## Polynomial DLM in R: Chicago

What is the main assumption here? Can we relax it?

```{r}
#| echo: true
#| eval: true
#| fig-align: "center"
plot(pred1.pm,
  ptype = "slices", var = 1,
  cumul = FALSE, ylab = "RR", main = "Association with a 1-unit increase in PM10"
)
```

## Extension to distributed non-linear lag models

-   We know that temperature and mortality have a U-shape relationship

-   We know that high temperature has a lag effect on mortality

-   Can we define models to combine these two components?

The idea: to calculate this bi-dimensional relationship, we need a basis function that combines the basis function in the lag dimension and the basis function in the exposure dimension: **Cross-basis function**

## Linear-by-constant

![](Figures/dlnm1.PNG){fig-align="center"}

## Spline-by-constant

![](Figures/dlnm2.PNG){fig-align="center"}

## Step-by-step

![](Figures/dlnm3.PNG){fig-align="center"}

## Spline-by-spline

![](Figures/dlnm4.PNG){fig-align="center"}

## Example 3: Temperature in Chicago

```{r}
#| echo: true
#| eval: true
cb2.pm <- crossbasis(chicagoNMMAPS$pm10,
  lag = 1, argvar = list(fun = "lin"),
  arglag = list(fun = "strata")
)

varknots <- equalknots(chicagoNMMAPS$temp, fun = "bs", df = 5, degree = 2)
lagknots <- logknots(10, 3)
cb2.temp <- crossbasis(chicagoNMMAPS$temp, lag = 10, argvar = list(
  fun = "bs",
  knots = varknots
), arglag = list(knots = lagknots))


model_dlm2 <- mgcv::gam(death ~ cb2.pm + cb2.temp + s(time) + s(month) + dow,
  family = poisson(), chicagoNMMAPS
)

pred2.temp <- crosspred(cb2.temp, model_dlm2, cen = 21, by = 1)
```

## Example 3: Temperature in Chicago

```{r}
#| echo: true
#| eval: true
#| fig-align: "center"
#| fig-width: 5
plot(pred2.temp,
  xlab = "Temperature", zlab = "RR", theta = 200, phi = 40, lphi = 100,
  main = "3D graph of temperature effect"
)
```

::: {style="font-size: 70%;"}
## Example 3: Temperature in Chicago

```{r}
#| echo: true
#| eval: true
#| fig-align: "center"
library(plotly)
p <- plot_ly()
p <- add_surface(p, x = 0:10, y = -20:30, z = pred2.temp$matRRfit)

layout(p, scene = list(
  xaxis = list(title = "Lag"),
  yaxis = list(title = "Temperature", range = c(0, 30)),
  zaxis = list(title = "Relative risk")
))
```
:::

## Example 3: Temperature in Chicago

```{r}
#| echo: true
#| eval: true
#| fig-align: "center"
#| fig-width: 7
plot(pred2.temp, "contour",
  xlab = "Temperature", key.title = title("RR"),
  plot.title = title("Contour plot", xlab = "Temperature", ylab = "Lag")
)
```

## Example 3: Temperature in Chicago

```{r}
#| echo: true
#| eval: true
#| fig-align: "center"
plot(pred2.temp, "slices",
  var = 30, col = 1, ylim = c(0.95, 1.2), lwd = 1.5,
  main = "Lag-response curves for different temperatures, ref. 21C"
)
```

## Example 3: Temperature in Chicago

```{r}
#| echo: true
#| eval: true
#| fig-align: "center"
plot(pred2.temp, "slices",
  var = c(-20, 33), lag = c(0, 5), col = 4,
  ci.arg = list(density = 40, col = grey(0.7))
)
```

## Summary

-   Extend basis function to incorporate the different lags

-   Distributed lag linear models

-   Distributed lag non-linear models

-   Can we expand to space?

Check : [https://cran.r-project.org/web/packages/dlnm/ vignettes/dlnmTS.pdf](https://cran.r-project.org/web/packages/dlnm/%20vignettes/dlnmTS.pdf)

Questions?
